[
  { "id":"1","title":"Hello Python","description":"Run your first Python program and understand the REPL model.","starter":"print('Hello, TON!')"},
  { "id":"2","title":"Variables & Types","description":"Numbers, strings, booleans; basic operations and type hints.","starter":"name = 'Alice'\nage = 30\npi = 3.1415\nprint(name, age, pi)"},
  { "id":"3","title":"Control Flow","description":"If, elif, else — branching and truthy values.","starter":"x = 42\nif x % 2 == 0:\n    print('even')\nelse:\n    print('odd')"},
  { "id":"4","title":"Loops & Iteration","description":"For and while loops; iterables and range.","starter":"for i in range(5):\n    print(f'iteration {i}')"},
  { "id":"5","title":"Functions & Scope","description":"Define functions, default args, return values and scope.","starter":"def add(a, b=0):\n    return a + b\nprint(add(3,4))"},
  { "id":"6","title":"Data Structures — Lists & Tuples","description":"List operations, slicing, tuple immutability.","starter":"data = [1,2,3,4]\nprint(data[0], data[-1])\nprint(data[1:3])"},
  { "id":"7","title":"Data Structures — Dicts & Sets","description":"Mapping types, lookups and set operations.","starter":"person = {'name':'Ali','age':25}\nprint(person['name'])\nfruits = set(['apple','banana'])\nprint('apple' in fruits)"},
  { "id":"8","title":"File I/O","description":"Read and write files safely with context managers.","starter":"with open('notes.txt','w') as f:\n    f.write('TON PlayCode demo')\nprint('written')"},
  { "id":"9","title":"Exceptions & Debugging","description":"Try/except, raising exceptions, and basic debugging tips.","starter":"try:\n    x = int('abc')\nexcept ValueError as e:\n    print('Conversion failed:', e)"},
  { "id":"10","title":"Modules & Packages","description":"Importing, using standard library modules.","starter":"import math\nprint('sqrt(16)=', math.sqrt(16))"},
  { "id":"11","title":"Comprehensions","description":"List/dict/set comprehensions for concise code.","starter":"squares = [x*x for x in range(6)]\nprint(squares)"},
  { "id":"12","title":"Functional Tools","description":"map, filter, lambda, functools basics.","starter":"nums = [1,2,3,4]\ndoubled = list(map(lambda x: x*2, nums))\nprint(doubled)"},
  { "id":"13","title":"OOP — Classes & Instances","description":"Define classes, methods, and constructors.","starter":"class Person:\n    def __init__(self, name):\n        self.name = name\n    def greet(self):\n        return 'Hello ' + self.name\np = Person('Ton')\nprint(p.greet())"},
  { "id":"14","title":"OOP — Inheritance & Polymorphism","description":"Subclassing and method overriding.","starter":"class Animal:\n    def speak(self):\n        return '...'\nclass Dog(Animal):\n    def speak(self):\n        return 'woof'\nprint(Dog().speak())"},
  { "id":"15","title":"Iterators & Generators","description":"Lazy sequences with yield and iterator protocol.","starter":"def gen(n):\n    for i in range(n):\n        yield i*i\nfor v in gen(5):\n    print(v)"},
  { "id":"16","title":"Decorators","description":"Function decorators for cross-cutting concerns.","starter":"def log(f):\n    def wrapper(*a,**kw):\n        print('call', f.__name__)\n        return f(*a,**kw)\n    return wrapper\n@log\ndef hi():\n    print('hi')\nhi()"},
  { "id":"17","title":"Recursion & Algorithms","description":"Recursive thinking — example: factorial and quick recursion.","starter":"def fact(n):\n    if n<=1: return 1\n    return n*fact(n-1)\nprint(fact(6))"},
  { "id":"18","title":"Sorting & Searching","description":"Implement binary search; understand complexity.","starter":"def binary_search(arr, x):\n    lo, hi = 0, len(arr)-1\n    while lo<=hi:\n        mid=(lo+hi)//2\n        if arr[mid]==x: return mid\n        if arr[mid]<x: lo=mid+1\n        else: hi=mid-1\n    return -1\nprint(binary_search([1,3,5,7],5))"},
  { "id":"19","title":"Working with JSON","description":"Serialize/deserialize using json module.","starter":"import json\ndata={'a':1,'b':2}\ns = json.dumps(data)\nprint(s)\nprint(json.loads(s))"},
  { "id":"20","title":"Mini Project: CLI To-Do (in-memory)","description":"Combine lessons: build a tiny in-memory to-do manager.","starter":"todos=[]\ndef add(task):\n    todos.append(task)\nadd('write tests')\nadd('build feature')\nprint('TODOS:', todos)"}
]
